/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package activitat5;

import javax.swing.JDialog;

/**
 *
 * @author Alumne
 */
public class NovaPartida extends javax.swing.JFrame {
    //variables
    boolean jugaX = true;
    boolean jugaO = false;
    int filaOrigen = -1;
    int columnaOrigen = -1;

    /**
     * Creates new form NovaPartida
     */
    public NovaPartida() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnSortir = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        taulell = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnSortir.setText("Sortir");

        taulell.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"X", null, "X", null, "X", null, "X", null},
                {null, "X", null, "X", null, "X", null, "X"},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {"O", null, "O", null, "O", null, "O", ""},
                {null, "O", null, "O", null, "O", null, "O"}
            },
            new String [] {
                "1", "2", "3", "4", "5", "6", "7", "8"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        taulell.setColumnSelectionAllowed(true);
        taulell.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                taulellMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(taulell);
        taulell.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(156, 156, 156)
                .addComponent(btnSortir)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(btnSortir)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Event Click a la taula
    private void taulellMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_taulellMouseClicked
        int fila = obtenirFilaClicada();
        int columna = obtenirColumnaClicada();
        //jlabel.setText("");----------------------------------------------------------------------------------

        if (noHiHaOrigen()) {
            if (jugaX && EsX(fila,columna)){
                actualitzaNouOrigen(fila,columna);
            } else if (jugaO && EsO(fila,columna)){
                actualitzaNouOrigen(fila,columna);
            }else{
		mostraError();
            }
        }else{
            if(movimentVàlid(fila,columna)){//si diagonal cap avall per X o cap a dalt per O
                if(esBuit(fila,columna) || OcupatContrari(fila,columna)){
                    mou(fila,columna);
                }
            }else{
                if(OcupatPropi(fila,columna)){
                    actualitzaNouOrigen(fila,columna);
                }else{
                    mostraErrorMoviment();
                }
            }
        }        
    }//GEN-LAST:event_taulellMouseClicked

   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSortir;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable taulell;
    // End of variables declaration//GEN-END:variables

    
public int obtenirFilaClicada(){
    return taulell.getSelectedRow();
}

public int obtenirColumnaClicada(){
    return taulell.getSelectedColumn();
}

public boolean noHiHaOrigen(){
    if (filaOrigen == -1){
        return true;
    }else{
        return false;
    }
}

public boolean EsX(int fila, int columna){
    return (taulell.getValueAt(fila, columna).equals("X"));
}

public boolean EsO(int fila, int columna){
    return (taulell.getValueAt(fila, columna).equals("O"));
}

public void actualitzaNouOrigen(int fila, int columna){
    filaOrigen = fila;
    columnaOrigen = columna;
}

public void mostraError(){
    System.err.println("Error");
}

public boolean movimentVàlid(int fila, int columna){
    if (jugaX){
        if((fila == filaOrigen - 1) && (columna == columnaOrigen + 1 || columna == columnaOrigen - 1)){
            return true;
        }else{
            return false;
        }
    }else{
        if((fila == filaOrigen + 1) && (columna == columnaOrigen + 1 || columna == columnaOrigen - 1)){
            return true;
        }else{
            return false;
        }
    }
}

public boolean esBuit(int fila, int columna){
    return (taulell.getValueAt(fila, columna) == (null));
}

public boolean OcupatContrari(int fila, int columna){
    if(!esBuit(fila, columna)){
        if(jugaX){
            return (taulell.getValueAt(fila, columna).equals("O"));
        }else{
            return (taulell.getValueAt(fila, columna).equals("X"));
        }
    }
    return false;
}

public void mou(int fila, int columna){
    //borra fitxa
    taulell.setValueAt(null, filaOrigen, columnaOrigen);
    
    if (jugaX){
        //mou fitxa
        taulell.setValueAt("X", fila, columna);
        //canvi de jugador
        jugaX = false;
        jugaO = true;
    }else{
        //mou fitxa
        taulell.setValueAt("O", fila, columna);
        //canvi de jugador
        jugaX = true;
        jugaO = false;
    }
    
    //inicialitzar origen
    filaOrigen = -1;
    columnaOrigen = -1;
}

public boolean OcupatPropi(int fila, int columna){
    if(!esBuit(fila, columna)){
        if(jugaX){
            return (taulell.getValueAt(fila, columna).equals("X"));
        }else{
            return (taulell.getValueAt(fila, columna).equals("O"));
        }
    }
    return false;
}

public void mostraErrorMoviment(){
    System.err.println("Error al moure");
}

	



}
